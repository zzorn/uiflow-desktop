package org.uiflow.desktop.chart;

import org.flowutils.Ranged;
import org.flowutils.collections.dataseries.*;
import org.flowutils.drawcontext.marker.DefaultMarkers;
import org.flowutils.drawcontext.marker.Marker;
import org.uiflow.desktop.chart.axis.*;
import org.uiflow.desktop.chart.chartlayer.BarLayer;
import org.uiflow.desktop.chart.chartlayer.LineLayer;
import org.uiflow.desktop.gradient.ColorGradients;
import org.uiflow.desktop.gradient.ColorMapper;
import org.uiflow.desktop.ui.SimpleFrame;

import java.util.Date;

/**
 *
 */
public class ChartExample {

    private static final long YEARS = (long) (365.25*24*60*60*1000);

    public static void main(String[] args) {

        DefaultChart chart = new DefaultChart("Global Warming vs Number Of Pirates");

        final long startTime = Date.UTC(-200, 1, 1, 0, 0, 0);
        final long endTime = Date.UTC(100, 1, 1, 0, 0, 0);


        final TimeAxis timeAxis = new TimeAxis();
        final Axis<Integer> pirateCountAxis = new Axis<Integer>("Number of Pirates", Integer.class);
        final Axis<Double> globalWarmingAxis = new Axis<Double>("Global Warming", Double.class);

        final AxisView<Long> timeAxisView = chart.addAxis(timeAxis, AxisOrientation.HORIZONTAL_BOTTOM, startTime, endTime);
        final AxisView<Integer> numberOfPiratesAxisView = chart.addAxis(pirateCountAxis,
                                                                        AxisOrientation.VERTICAL_RIGHT,
                                                                        0, 750);
        final AxisView<Double> globalWarmingAxisView = chart.addAxis(globalWarmingAxis,
                                                                     AxisOrientation.VERTICAL_LEFT,
                                                                     -0.5, 1.0);


        // This data is professionally generated by carefully pulling numbers out of thin air, and should not be trusted.
        // TODO: We need some gradient backed data series, that allows placing values with arbitrary indexes.  May need to generify gradient first though.
        DataSeries<Long, Integer> numberOfPiratesOverTime = new ArrayListDataSeries<Long, Integer>(timeAxis, startTime, 11*
                                                                                                                        YEARS,
                                                                                                   30,
                                                                                                   65,
                                                                                                   123,
                                                                                                   150,
                                                                                                   220,
                                                                                                   303,
                                                                                                   554,
                                                                                                   434,
                                                                                                   421,
                                                                                                   443,
                                                                                                   389,
                                                                                                   323,
                                                                                                   298,
                                                                                                   212,
                                                                                                   187,
                                                                                                   123,
                                                                                                   87,
                                                                                                   65,
                                                                                                   43,
                                                                                                   55,
                                                                                                   32,
                                                                                                   17,
                                                                                                   6,
                                                                                                   4,
                                                                                                   3,
                                                                                                   0,
                                                                                                   2,
                                                                                                   0,
                                                                                                   0,
                                                                                                   1,
                                                                                                   0,
                                                                                                   0);

        DataSeries<Long, Double> globalWarmingOverTime = new ArrayListDataSeries<Long, Double>(timeAxis, startTime, 11*YEARS,
                                                                                                   0.0,
                                                                                                   -0.1,
                                                                                                   -0.12,
                                                                                                   -0.3,
                                                                                                   -0.1,
                                                                                                   0.1,
                                                                                                   0.05,
                                                                                                   0.1,
                                                                                                   0.2,
                                                                                                   0.23,
                                                                                                   0.12,
                                                                                                   0.32,
                                                                                                   0.43,
                                                                                                   0.54,
                                                                                                   0.23,
                                                                                                   0.13,
                                                                                                   0.32,
                                                                                                   0.45,
                                                                                                   0.23,
                                                                                                   0.65,
                                                                                                   0.23,
                                                                                                   0.12,
                                                                                                   0.23,
                                                                                                   0.56,
                                                                                                   0.87,
                                                                                                   0.43);

        // TODO: Easier way to specify that a channel should use a RelativePosMapper.  Maybe a method for it.

        final BarLayer<Long, Integer> pirateCountLayer = chart.addLayer(new BarLayer<Long, Integer>(timeAxis, pirateCountAxis));
        pirateCountLayer.barHeight.setData(numberOfPiratesOverTime);
        pirateCountLayer.barColor.setData(numberOfPiratesOverTime,
                                     new RelativePosMapper<Integer>(numberOfPiratesAxisView),
                                     new ColorMapper<Ranged>(ColorGradients.RAINBOW));
        pirateCountLayer.barWidth.setData(new DataSeriesBase<Long, Ranged>(timeAxis) {
            @Override public Ranged getValue(Long position) {
                return new Ranged(Math.sin((double) position / 333* YEARS), -3, 1);
            }
        });

        final LineLayer<Long, Double> globalWarmingLayer = chart.addLayer(new LineLayer<Long, Double>(timeAxis, globalWarmingAxis));
        globalWarmingLayer.lineHeight.setData(globalWarmingOverTime);
        globalWarmingLayer.lineColor.setData(globalWarmingOverTime,
                                             new RelativePosMapper<Double>(globalWarmingAxisView),
                                             new ColorMapper<Ranged>(ColorGradients.BLUERED));
        globalWarmingLayer.setDefaultLineThickness(5);
        globalWarmingLayer.thickness.setData(createSinDataSeries(timeAxis, 100 * YEARS, 3f, 5f));
        globalWarmingLayer.markerType.setData(new ConstantDataSeries<Long, Marker>(timeAxis, DefaultMarkers.DIAMOND));
        globalWarmingLayer.markerSize.setData(createSinDataSeries(timeAxis, 33*YEARS, 0.3f, 0.6f));
        globalWarmingLayer.markerColor.setData(createSinDataSeriesDouble(timeAxis, 33*YEARS, 0.3f, 0.5f), ColorGradients.RAINBOW);

        new SimpleFrame("Chart Example", chart.getUi());

    }

    private static DataSeriesBase<Long, Float> createSinDataSeries(final TimeAxis timeAxis, final long period,
                                                                   final float amplitude, final float offset) {
        return new DataSeriesBase<Long, Float>(timeAxis) {
            @Override public Float getValue(Long position) {
                return (float) Math.sin((double) position / period) * amplitude + offset;
            }
        };
    }

    private static DataSeriesBase<Long, Double> createSinDataSeriesDouble(final TimeAxis timeAxis, final long period,
                                                                   final double amplitude, final double offset) {
        return new DataSeriesBase<Long, Double>(timeAxis) {
            @Override public Double getValue(Long position) {
                return Math.sin((double) position / period) * amplitude + offset;
            }
        };
    }

}
